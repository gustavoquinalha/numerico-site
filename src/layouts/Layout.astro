---
interface Props {
  title: string;
}

const { title } = Astro.props;

import '@fontsource/geist-sans';
import '@fontsource/geist-mono';
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>{title}</title>
    <meta name="description" content="Web & Design Studio" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="theme-color" content="#0c0a09" />
    <!-- Open Graph / Facebook -->
    <meta property="og:title" content="numéric0 - Web & Design Studio" />
    <meta property="og:description" content="Pensar, Desenhar, Desenvolver, Lançar, Repetir." />
    <meta property="og:type" content="website" />
    <meta property="og:image:alt" content="number zero" />
    <meta property="og:image" content="https://numeric0.com/images/intro3.png" />
    <meta property="og:url" content="https://www.numeric0.com" />
    <meta property="fb:app_id" content="739468404727575" />
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content="https://numeric0.com/" />
    <meta property="twitter:title" content="numéric0 - Web & Design Studio" />
    <meta property="twitter:description" content="Pensar, Desenhar, Desenvolver, Lançar, Repetir." />
    <meta property="twitter:image" content="https://numeric0.com/images/intro3.png" />
  </head>
  <body class="bg-stone-100 text-stone-950">
    <div class="loader flex items-center justify-center text-center w-screen h-screen bg-stone-950 text-stone-100 z-50 gap-4">
      <span id="loading" class="">0%</span>
    </div>
    <slot />
  </body>
</html>

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/dist/ScrollTrigger';
  import imagesLoaded from 'imagesloaded';
  import SplitType from 'split-type';

  document.addEventListener('DOMContentLoaded', function () {
    document.body.style.overflow = 'hidden';

    // document.addEventListener('mousemove', handleMouseMove);
    // function handleMouseMove(event: any) {
    //   console.log(`handleMouseMove`);
    //   const x = event.pageX;
    //   const y = event.pageY;

    //   const content: HTMLElement = document.querySelector('.content')!;
    //   const site1: HTMLElement = document.querySelector('.site-1')!;
    //   content.style.cssText = `background-position: ${x - 250}px ${y - 250}px`;
    //   site1.style.cssText = `mask-position: ${x - 250}px ${y - 250}px`;
    // }

    let valorDesconto = 50;

    window.addEventListener('mousemove', (event) => {
      handleMouseMove(event);
    });

    function handleMouseMove(event: any) {
      console.log(`handleMouseMove`);
      const x = event.pageX;
      const y = event.pageY;

      const content: HTMLElement = document.querySelector('.content')!;
      const site1: HTMLElement = document.querySelector('.site-1')!;
      content.style.cssText = `background-position: ${x - valorDesconto}px ${y - valorDesconto}px`;
      site1.style.cssText = `mask-position: ${x - valorDesconto}px ${y - valorDesconto}px`;
    }

    let isScrollTimeout = false;
    window.addEventListener('scroll', (event) => {
      if (!isScrollTimeout) {
        isScrollTimeout = true;

        setTimeout(() => {
          handleScroll(event);
          isScrollTimeout = false;
        }, 2000);
      }
    });

    function handleScroll(event: any) {
      console.log('Scroll detectado!', event);

      const scrollPosition = window.scrollY;
      console.log('Posição atual do scroll:', scrollPosition);

      const divContent: HTMLElement = document.querySelector('.content')!;

      if (scrollPosition > 500) {
        divContent.classList.add('teste');
      } else {
        divContent.classList.remove('teste');
      }
    }

    // markers: true,

    const images: HTMLImageElement[] = gsap.utils.toArray('img');

    const updateProgress = (instance: any) => {
      const loader = document.querySelector('#loading')!;
      loader.textContent = `${Math.round((instance.progressedCount * 100) / images.length)}%`;
    };

    const loadFinished = () => {
      document.body.style.overflow = 'auto';
      document?.scrollingElement?.scrollTo(0, 0);
      gsap.to(document.querySelector('.loader'), { autoAlpha: 0 });
    };

    const startAnimations = () => {
      gsap.registerPlugin(ScrollTrigger, SplitType);
      ScrollTrigger.defaults({
        toggleActions: 'play pause resume reset',
        scroller: 'body',
      });

      // gsap.to('.icone', {
      //   scrollTrigger: {
      //     trigger: '#hero',
      //     start: 'top top',
      //     end: '100% top',
      //     scrub: true,
      //   },
      //   stagger: 0.1,
      //   backgroundPosition: '0% 100%',
      //   ease: 'power1.in',
      // });

      // gsap.to('.mask-icone', {
      //   scrollTrigger: {
      //     trigger: '#hero',
      //     start: 'top top',
      //     end: '100% top',
      //     scrub: true,
      //   },
      //   stagger: 0.1,
      //   maskPosition: '0% 100%',
      //   ease: 'power1.in',
      // });

      // gsap.to('#together', {
      //   scrollTrigger: {
      //     trigger: '#together',
      //     start: '-10% 80%',
      //     end: '30% 100%',
      //     scrub: true,
      //   },
      //   stagger: 0.1,
      //   backgroundColor: '#0c0a09',
      //   color: '#f5f5f4',
      //   ease: 'power1.in',
      // });
    };

    (imagesLoaded(images) as any).on('progress', updateProgress).on('done', loadFinished).on('always', startAnimations);
  });
</script>

<style is:global>
  :root {
    color-scheme: dark;
  }

  .geist-sans,
  body {
    font-family: 'Geist Sans', sans-serif;
  }
  .geist-mono,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: 'Geist Mono';
  }

  html {
    overflow-x: hidden;
    height: 100%;
    -webkit-overflow-scrolling: touch;
    overflow-scrolling: touch;
    margin: 0;
    padding: 0;
    scroll-behavior: smooth;
  }
  body {
    margin: 0;
    padding: 0;
    overflow-x: hidden;
    position: relative;
    height: unset;
  }

  .loader {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    color: #f5f5f4;
    z-index: 10000;
  }
</style>
